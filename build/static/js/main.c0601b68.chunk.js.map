{"version":3,"sources":["components/Filter.jsx","components/Notification.jsx","components/PersonForm.jsx","services/phoneService.jsx","components/Person.jsx","components/Persons.jsx","App.jsx","index.jsx"],"names":["Filter","props","value","keyword","onChange","stateUpdater","Notification","message","type","className","PersonForm","submitAction","name","nameUpdater","number","numberUpdater","onSubmit","baseUrl","svc","getAll","a","axios","get","resp","data","create","obj","post","remove","id","delete","update","edited","put","Person","delFunc","onClick","Persons","db","setDb","setError","reduce","filtered","person","element","entry","find","p","window","confirm","then","filter","setTimeout","text","catch","toLowerCase","includes","push","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setKeyword","error","useEffect","clr","event","target","preventDefault","exist","mod","map","split","s","trim","charAt","toUpperCase","substring","join","concat","e","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0601b68.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>\r\n            filter shown with{\" \"}\r\n            <input\r\n                value={props.keyword}\r\n                onChange={props.stateUpdater}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Filter\r\n","const Notification = ({ message, type }) => {\r\n    // const err = {\r\n    //     color: \"red\",\r\n    //     background: \"wheat\",\r\n    //     border: \"solid\",\r\n    //     fontSize: 20,\r\n    //     borderRadius: 10,\r\n    //     padding: 3,\r\n    //     marginBottom: 20,\r\n    // };\r\n\r\n    // const success = {\r\n    //     backgroundColor: \"lightgreen\",\r\n    //     color: \"green\",\r\n    //     borderStyle: \"solid\",\r\n    //     fontSize: 20,\r\n    //     borderRadius: 10,\r\n    //     padding: 3,\r\n    //     marginBottom: 20,\r\n    // };\r\n\r\n    // const style = type === \".error\" ? err : type === \".success\" ? success : null;\r\n\r\n    if (message === null) {\r\n        return null;\r\n    }\r\n    return <div className={`${type}`}>{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n    const {submitAction, name, nameUpdater, number, numberUpdater} = props;\r\n    return (\r\n        <form onSubmit={submitAction}>\r\n            <div>\r\n                name: <input value={name} onChange={nameUpdater} />\r\n            </div>\r\n            <div>\r\n                number:{\" \"}\r\n                <input\r\n                    value={number}\r\n                    onChange={numberUpdater}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default PersonForm\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = async () => {\r\n    const resp = await axios.get(baseUrl);\r\n    return resp.data;\r\n};\r\n\r\nconst create = async (obj) => {\r\n    const resp = await axios.post(baseUrl, obj);\r\n    return resp.data;\r\n};\r\n\r\nconst remove = async (id) => {\r\n    const resp = await axios.delete(`${baseUrl}/${id}`, { id: id });\r\n    return resp.data;\r\n};\r\n\r\nconst update = async (id, edited) => {\r\n    const resp = await axios.put(`${baseUrl}/${id}`, edited);\r\n    return resp.data;\r\n};\r\n\r\nconst svc = {\r\n    getAll,\r\n    create,\r\n    remove,\r\n    update,\r\n};\r\n\r\nexport default svc;\r\n","import React from 'react'\r\n\r\nconst Person = ({ name, number, delFunc}) => {\r\n    return (\r\n        <li key={name} className=\"person\">\r\n            {name} {number}\r\n            <button onClick={delFunc}>delete</button>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Person\r\n","import svc from \"../services/phoneService\";\r\nimport Person from \"./Person\";\r\n\r\nconst Persons = (props) => {\r\n    const { db, keyword, setDb, setError } = props;\r\n    // Delete func for a entry in directory\r\n    const remove = (id) => () => {\r\n        const entry = db.find((p) => p.id === id);\r\n        // Delete confirmation with a 5-sec notif after deletion\r\n        if (window.confirm(`Delete ${entry.name}`)) {\r\n            svc.remove(entry.id)\r\n                .then(() => {\r\n                    setDb(db.filter((p) => p.id !== entry.id));\r\n                })\r\n                .then(() => {\r\n                    setTimeout(() => {\r\n                        setError({});\r\n                    }, 5000);\r\n                    setError({\r\n                        text: `Deleted ${entry.name}`,\r\n                        type: \"error\",\r\n                    });\r\n                })\r\n                // Error-catching in case data present in front-end but not in db\r\n                .catch(() => {\r\n                    setTimeout(() => {\r\n                        setError({});\r\n                    }, 5000);\r\n                    setError({\r\n                        text: `Information of ${entry.name} has already been removed from server`,\r\n                        type: \"error\",\r\n                    });\r\n                    setDb(db.filter((p) => p.id !== id));\r\n                });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {/* Phone directory, filtered if search queru is not empty. */}\r\n                {/* {db\r\n                    .filter((person) => {\r\n                        if (keyword !== \"\") {\r\n                            return person.name\r\n                                .toLowerCase()\r\n                                .includes(keyword.toLowerCase());\r\n                        }\r\n                        return true;\r\n                    })\r\n                    .map((person) => (\r\n                        <Person\r\n                            key={person.id}\r\n                            name={person.name}\r\n                            number={person.number}\r\n                            delFunc={remove(person.id)}\r\n                        />\r\n                    ))} */}\r\n                {db.reduce((filtered, person) => {\r\n                    const element = (\r\n                        <Person\r\n                            key={person.id}\r\n                            name={person.name}\r\n                            number={person.number}\r\n                            delFunc={remove(person.id)}\r\n                        />\r\n                    );\r\n                    if (keyword !== \"\") {\r\n                        if (\r\n                            person.name\r\n                                .toLowerCase()\r\n                                .includes(keyword.toLowerCase())\r\n                        ) {\r\n                            filtered.push(element);\r\n                        }\r\n                        return filtered;\r\n                    }\r\n                    filtered.push(element);\r\n                    return filtered;\r\n                }, [])}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Persons;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Filter from \"./components/Filter\";\r\nimport Notification from \"./components/Notification\";\r\nimport PersonForm from \"./components/PersonForm\";\r\nimport Persons from \"./components/Persons\";\r\nimport svc from \"./services/phoneService\";\r\n\r\nconst App = () => {\r\n\r\n    // Initialising hooks.\r\n    const [persons, setPersons] = useState([]);\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [newNumber, setNewNumber] = useState(\"\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [error, setError] = useState({});\r\n\r\n    const hookDB = () => {\r\n        svc.getAll().then((resp) => {\r\n            setPersons(resp);\r\n        });\r\n    };\r\n\r\n    // Syncing persons obj to backend db at beginning.\r\n    useEffect(hookDB, []);\r\n\r\n    // clear func for resetting form fields after submission.\r\n    const clr = () => {\r\n        setNewName(\"\");\r\n        setNewNumber(\"\");\r\n    };\r\n\r\n    // Add new person to db, spl: if person w/ same name exists, update their data or else cancel.\r\n    const addName = (event) => {\r\n        // Prevents page reload.\r\n        event.preventDefault();\r\n        const exist = persons.find((p) => p.name === newName);\r\n\r\n        // if-else for 'spl' case\r\n        if (exist) {\r\n            if (\r\n                window.confirm(\r\n                    `${newName} is already added to phonebook, replace old number with a new one?`\r\n                )\r\n            ) {\r\n                const mod = {\r\n                    ...exist,\r\n                    number: newNumber,\r\n                };\r\n                // PUT request with a 5-sec notif\r\n                svc.update(exist.id, mod)\r\n                    .then((data) => {\r\n                        setPersons(\r\n                            persons.map((p) => {\r\n                                if (p.id === exist.id) {\r\n                                    return data;\r\n                                }\r\n                                return p;\r\n                            })\r\n                        );\r\n                    })\r\n                    .then(() => {\r\n                        setTimeout(() => {\r\n                            setError({});\r\n                        }, 5000);\r\n                        setError({\r\n                            text: `Updated ${exist.name}`,\r\n                            type: \"success\",\r\n                        });\r\n                    });\r\n            }\r\n            clr();\r\n            return;\r\n        }\r\n        const obj = {\r\n            name: newName\r\n                .split(\" \")\r\n                .map(\r\n                    (s) =>\r\n                        `${s\r\n                            .trim()\r\n                            .charAt(0)\r\n                            .toUpperCase()}${s\r\n                            .trim()\r\n                            .substring(1)\r\n                            .toLowerCase()}`\r\n                )\r\n                .join(\" \"),\r\n            number: newNumber,\r\n        };\r\n        // POST request with a 5-sec notif\r\n        svc.create(obj)\r\n            .then(() => setPersons(persons.concat(obj)))\r\n            .then(() => clr())\r\n            .then(() => {\r\n                setTimeout(() => {\r\n                    setError({});\r\n                }, 5000);\r\n                setError({\r\n                    text: `Added ${newName}`,\r\n                    type: \"success\",\r\n                });\r\n            })\r\n            .catch((e) => console.log(e.message));\r\n            clr();\r\n    };\r\n\r\n    // Main page elements\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n            {/* Notifier if error is not empty */}\r\n            <Notification message={error.text} type={error.type} />\r\n            {/* Search bar */}\r\n            <Filter\r\n                keyword={keyword}\r\n                stateUpdater={(event) => setKeyword(event.target.value)}\r\n            />\r\n            <h2>add a new</h2>\r\n            {/* Form for person details (w/o validation)*/}\r\n            <PersonForm\r\n                submitAction={addName}\r\n                name={newName}\r\n                nameUpdater={(event) => setNewName(event.target.value)}\r\n                number={newNumber}\r\n                numberUpdater={(event) => setNewNumber(event.target.value)}\r\n            />\r\n            <h2>Numbers</h2>\r\n            {/* Phone directory */}\r\n            <Persons\r\n                db={persons}\r\n                keyword={keyword}\r\n                setDb={setPersons}\r\n                setError={setError}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}