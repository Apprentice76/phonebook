{"version":3,"sources":["components/Note.jsx","components/Notification.jsx","services/noteService.jsx","App.jsx","index.jsx"],"names":["Note","note","toggle","imp","important","className","content","onClick","Notification","message","baseUrl","svs","getAll","a","axios","get","resp","data","create","obj","post","update","id","edited","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","svc","then","length","notesToShow","filter","n","map","orig","find","catch","setTimeout","onSubmit","event","preventDefault","noteObj","date","Date","toISOString","Math","random","concat","placeholder","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAUeA,EAVF,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACZC,EAAMF,EAAKG,UAAY,qBAAuB,iBACpD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAA0BC,QCMvBK,EAXM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAGP,qBAAKJ,UAAU,QAAf,SACKI,K,uCCJPC,EAAU,8BAuBDC,EANH,CACRC,OAhBe,uCAAG,4BAAAC,EAAA,sEACCC,IAAMC,IAAIL,GADX,cACZM,EADY,yBAEXA,EAAKC,MAFM,2CAAH,qDAiBfC,OAZe,uCAAG,WAAOC,GAAP,eAAAN,EAAA,sEACCC,IAAMM,KAAKV,EAASS,GADrB,cACZH,EADY,yBAEXA,EAAKC,MAFM,2CAAH,sDAafI,OARe,uCAAG,WAAOC,EAAIC,GAAX,eAAAV,EAAA,sEACCC,IAAMU,IAAN,UAAad,EAAb,YAAwBY,GAAMC,GAD/B,cACZP,EADY,yBAEXA,EAAKC,MAFM,2CAAH,yDC6FJQ,EAtGH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAedC,qBARa,WACTC,QAAQC,IAAI,UACZC,EAAI1B,SAAS2B,MAAK,SAACtB,GACfmB,QAAQC,IAAI,aACZT,EAASX,QAID,IAChBmB,QAAQC,IAAI,SAAUV,EAAMa,OAAQ,SAGpC,IAAMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAACC,GAAD,OAAOA,EAAEvC,aAmD5D,OACI,gCACI,uCACA,cAAC,EAAD,CAAcK,QAASwB,IACvB,8BAEI,yBAAQ1B,QAAS,kBAAMyB,GAAYD,IAAnC,kBACUA,EAAU,YAAc,WAGtC,6BACKU,EAAYG,KAAI,SAAC3C,GAAD,OACb,cAAC,EAAD,CAEIA,KAAMA,EACNC,QA3CMoB,EA2CmBrB,EAAKqB,GA3CjB,WAC7B,IAAMuB,EAAOlB,EAAMmB,MAAK,SAACH,GAAD,OAAOA,EAAErB,KAAOA,KAClCC,EAAM,2BACLsB,GADK,IAERzC,WAAYyC,EAAKzC,YAErBkC,EAAIjB,OAAOC,EAAIC,GACVgB,MAAK,SAACtB,GACHW,EACID,EAAMiB,KAAI,SAAC3C,GACP,OAAIA,EAAKqB,KAAOA,EACLL,EAEJhB,SAIlB8C,OAAM,WACHb,EAAgB,UAAD,OACDX,EAAOjB,QADN,sCAGf0C,YAAW,WACPd,EAAgB,QACjB,KACHN,EAASD,EAAMe,QAAO,SAACC,GAAD,OAAOA,EAAErB,KAAOA,YAiBzBrB,EAAKqB,IAzCL,IAACA,OA+ClB,uBAAM2B,SAnEE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAU,CACZ9C,QAASuB,EACTwB,MAAM,IAAIC,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,IAEf,KAAZ5B,GACJS,EAAIpB,OAAOkC,GAASb,MAAK,SAACtB,GACtBmB,QAAQC,IAAIpB,GACZW,EAASD,EAAM+B,OAAON,IACtBtB,EAAW,QAwDX,UAEI,uBACI6B,YAAY,gBACZC,MAAO/B,EACPgC,SAxDS,SAACX,GACtBpB,EAAWoB,EAAMY,OAAOF,UAyDhB,wBAAQG,KAAK,SAAb,yB,MCjGhBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.aea102da.chunk.js","sourcesContent":["const Note = ({ note, toggle }) => {\r\n    const imp = note.important ? 'make not important' : 'make important';\r\n    return (\r\n        <li className=\"note\">\r\n            {note.content}\r\n            <button onClick={toggle}>{imp}</button>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default Note;\r\n","const Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"http://localhost:3001/notes\";\r\n\r\nexport const getAll = async () => {\r\n    const resp = await axios.get(baseUrl);\r\n    return resp.data;\r\n};\r\n\r\nexport const create = async (obj) => {\r\n    const resp = await axios.post(baseUrl, obj);\r\n    return resp.data;\r\n};\r\n\r\nexport const update = async (id, edited) => {\r\n    const resp = await axios.put(`${baseUrl}/${id}`, edited);\r\n    return resp.data;\r\n};\r\n\r\nconst svs = {\r\n    getAll,\r\n    create,\r\n    update,\r\n};\r\n\r\nexport default svs;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Note from \"./components/Note\";\r\nimport Notification from \"./components/Notification\";\r\nimport svc from \"./services/noteService\";\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([]);\r\n    const [newNote, setNewNote] = useState(\"\");\r\n    const [showAll, setShowAll] = useState(true);\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    // Set up a useEffect hook that re-renders page after fetching data from db.json's notes property. The 'hook' is a callback function for the empty array which itself signifies that the page is to be re-rendered only once after fetching data.\r\n    const hook = () => {\r\n        console.log(\"effect\");\r\n        svc.getAll().then((data) => {\r\n            console.log(\"fulfilled\");\r\n            setNotes(data);\r\n        });\r\n    };\r\n\r\n    useEffect(hook, []);\r\n    console.log(\"render\", notes.length, \"notes\");\r\n\r\n    // Stores which notes to view\r\n    const notesToShow = showAll ? notes : notes.filter((n) => n.important);\r\n\r\n    // This intercepts the form submit button and concats a new note to notes array. Also it removes the filler text in the form\r\n    const addNote = (event) => {\r\n        event.preventDefault();\r\n        const noteObj = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() < 0.5,\r\n        };\r\n        if (newNote === \"\") return;\r\n        svc.create(noteObj).then((data) => {\r\n            console.log(data);\r\n            setNotes(notes.concat(noteObj));\r\n            setNewNote(\"\");\r\n        });\r\n    };\r\n\r\n    // This is called every time the text in input area is altered and subsequently the value of new note is updated.\r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value);\r\n    };\r\n\r\n    const toggleImportance = (id) => () => {\r\n        const orig = notes.find((n) => n.id === id);\r\n        const edited = {\r\n            ...orig,\r\n            important: !orig.important,\r\n        };\r\n        svc.update(id, edited)\r\n            .then((data) => {\r\n                setNotes(\r\n                    notes.map((note) => {\r\n                        if (note.id === id) {\r\n                            return data;\r\n                        }\r\n                        return note;\r\n                    })\r\n                );\r\n            })\r\n            .catch(() => {\r\n                setErrorMessage(\r\n                    `Note: '${edited.content}' was already deleted from server`\r\n                );\r\n                setTimeout(() => {\r\n                    setErrorMessage(null);\r\n                }, 5000);\r\n                setNotes(notes.filter((n) => n.id !== id));\r\n            });\r\n    }; \r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <div>\r\n                {/* Toggles which notes to view */}\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                    show {showAll ? \"important\" : \"all\"}\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {notesToShow.map((note) => (\r\n                    <Note\r\n                        key={note.id}\r\n                        note={note}\r\n                        toggle={toggleImportance(note.id)}\r\n                    />\r\n                ))}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                {/* 'value' syncs with the text while 'onChange' calles a callback function that handles changes in the text area */}\r\n                <input\r\n                    placeholder=\"a new note...\"\r\n                    value={newNote}\r\n                    onChange={handleNoteChange}\r\n                />\r\n                <button type=\"submit\">save</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}