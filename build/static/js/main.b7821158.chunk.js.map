{"version":3,"sources":["components/Filter.jsx","components/Notification.jsx","components/PersonForm.jsx","services/phoneService.jsx","components/Person.jsx","components/Persons.jsx","App.jsx","index.jsx"],"names":["Filter","props","className","value","keyword","onChange","stateUpdater","placeholder","Notification","message","type","PersonForm","submitAction","name","nameUpdater","number","numberUpdater","onSubmit","baseUrl","svc","getAll","a","axios","get","resp","data","create","obj","post","remove","id","delete","update","edited","put","Person","uniq","delFunc","onClick","Persons","db","setDb","setError","filter","person","toLowerCase","includes","map","entry","find","p","window","confirm","then","setTimeout","text","catch","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setKeyword","error","useEffect","clr","event","target","class","preventDefault","exist","mod","console","log","e","response","split","s","trim","charAt","toUpperCase","substring","join","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7821158.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>\r\n            <input\r\n                className=\"search\"\r\n                value={props.keyword}\r\n                onChange={props.stateUpdater}\r\n                placeholder=\"Search...\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Filter\r\n","const Notification = ({ message, type }) => {\r\n    // const err = {\r\n    //     color: \"red\",\r\n    //     background: \"wheat\",\r\n    //     border: \"solid\",\r\n    //     fontSize: 20,\r\n    //     borderRadius: 10,\r\n    //     padding: 3,\r\n    //     marginBottom: 20,\r\n    // };\r\n\r\n    // const success = {\r\n    //     backgroundColor: \"lightgreen\",\r\n    //     color: \"green\",\r\n    //     borderStyle: \"solid\",\r\n    //     fontSize: 20,\r\n    //     borderRadius: 10,\r\n    //     padding: 3,\r\n    //     marginBottom: 20,\r\n    // };\r\n\r\n    // const style = type === \".error\" ? err : type === \".success\" ? success : null;\r\n\r\n    if (message === null) {\r\n        return null;\r\n    }\r\n    return <div className={`${type}`}>{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n    const {submitAction, name, nameUpdater, number, numberUpdater} = props;\r\n    return (\r\n        <form onSubmit={submitAction}>\r\n            <div>\r\n                <div className='entry'>Name</div>\r\n                <input className='value' value={name} onChange={nameUpdater} />\r\n            </div>\r\n            <div>\r\n                <div className='entry'>Number</div>\r\n                <input\r\n                    className='value'\r\n                    value={number}\r\n                    onChange={numberUpdater}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button type='submit'>add</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default PersonForm\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"http://localhost:3001/api/persons\";\r\n\r\nconst getAll = async () => {\r\n    const resp = await axios.get(baseUrl);\r\n    return resp.data;\r\n};\r\n\r\nconst create = async (obj) => {\r\n    const resp = await axios.post(baseUrl, obj);\r\n    return resp.data;\r\n};\r\n\r\nconst remove = async (id) => {\r\n    const resp = await axios.delete(`${baseUrl}/${id}`, { id: id });\r\n    return resp.data;\r\n};\r\n\r\nconst update = async (id, edited) => {\r\n    const resp = await axios.put(`${baseUrl}/${id}`, edited);\r\n    return resp.data;\r\n};\r\n\r\nconst svc = {\r\n    getAll,\r\n    create,\r\n    remove,\r\n    update,\r\n};\r\n\r\nexport default svc;\r\n","import React from 'react'\r\n\r\nconst Person = ({ uniq, name, number, delFunc}) => {\r\n    return (\r\n        <li key={uniq} className=\"person\">\r\n            {name} {number}\r\n            <button onClick={delFunc}>delete</button>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Person\r\n","import svc from \"../services/phoneService\";\r\nimport Person from \"./Person\";\r\n\r\nconst Persons = (props) => {\r\n    const { db, keyword, setDb, setError } = props;\r\n\r\n    // Delete func for a entry in directory\r\n    const remove = (id) => () => {\r\n        const entry = db.find((p) => p.id === id);\r\n        // Delete confirmation with a 5-sec notif after deletion\r\n        if (window.confirm(`Delete ${entry.name}`)) {\r\n            svc.remove(entry.id)\r\n                .then(() => {\r\n                    setDb(db.filter((p) => p.id !== entry.id));\r\n                })\r\n                .then(() => {\r\n                    setTimeout(() => {\r\n                        setError({});\r\n                    }, 5000);\r\n                    setError({\r\n                        text: `Deleted ${entry.name}`,\r\n                        type: \"error\",\r\n                    });\r\n                })\r\n                // Error-catching in case data present in front-end but not in db\r\n                .catch(() => {\r\n                    setTimeout(() => {\r\n                        setError({});\r\n                    }, 5000);\r\n                    setError({\r\n                        text: `Information of ${entry.name} has already been removed from server`,\r\n                        type: \"error\",\r\n                    });\r\n                    setDb(db.filter((p) => p.id !== id));\r\n                });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {/* Phone directory, filtered if search queru is not empty. */}\r\n                {db\r\n                    .filter((person) => {\r\n                        if (keyword !== \"\") {\r\n                            return person.name\r\n                                .toLowerCase()\r\n                                .includes(keyword.toLowerCase());\r\n                        }\r\n                        return true;\r\n                    })\r\n                    .map((person) => (\r\n                        <Person\r\n                            key={person.name}\r\n                            uniq={person.id}\r\n                            name={person.name}\r\n                            number={person.number}\r\n                            delFunc={remove(person.id)}\r\n                        />\r\n                    ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Persons;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Filter from \"./components/Filter\";\r\nimport Notification from \"./components/Notification\";\r\nimport PersonForm from \"./components/PersonForm\";\r\nimport Persons from \"./components/Persons\";\r\nimport svc from \"./services/phoneService\";\r\n\r\nconst App = () => {\r\n    // Initialising hooks.\r\n    const [persons, setPersons] = useState([]);\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [newNumber, setNewNumber] = useState(\"\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [error, setError] = useState({});\r\n\r\n    const hookDB = () => {\r\n        svc.getAll().then((resp) => {\r\n            setPersons(resp);\r\n        });\r\n    };\r\n\r\n    // Syncing persons obj to backend db at beginning.\r\n    useEffect(hookDB, []);\r\n\r\n    // clear func for resetting form fields after submission.\r\n    const clr = () => {\r\n        setNewName(\"\");\r\n        setNewNumber(\"\");\r\n    };\r\n\r\n    // Add new person to db, spl: if person w/ same name exists, update their data or else cancel.\r\n    const addName = (event) => {\r\n        // Prevents page reload.\r\n        event.preventDefault();\r\n        const exist = persons.find((p) => p.name === newName);\r\n\r\n        // if-else for 'spl' case\r\n        if (exist) {\r\n            if (\r\n                window.confirm(\r\n                    `${newName} is already added to phonebook, replace old number with a new one?`\r\n                )\r\n            ) {\r\n                const mod = {\r\n                    ...exist,\r\n                    number: newNumber,\r\n                };\r\n                // PUT request with a 5-sec notif\r\n                svc.update(exist.id, mod)\r\n                    .then((data) => {\r\n                        console.log(data);\r\n                        setPersons(\r\n                            persons.map((p) => {\r\n                                if (p.id === exist.id) {\r\n                                    return data;\r\n                                }\r\n                                return p;\r\n                            })\r\n                        );\r\n                    })\r\n                    .then(() => {\r\n                        setTimeout(() => {\r\n                            setError({});\r\n                        }, 5000);\r\n                        setError({\r\n                            text: `Updated ${exist.name}`,\r\n                            type: \"success\",\r\n                        });\r\n                    })\r\n                    .catch((e) => console.log(e.response.data));\r\n            }\r\n            clr();\r\n            return;\r\n        }\r\n        const obj = {\r\n            name: newName\r\n                .split(\" \")\r\n                .map(\r\n                    (s) =>\r\n                        `${s\r\n                            .trim()\r\n                            .charAt(0)\r\n                            .toUpperCase()}${s\r\n                            .trim()\r\n                            .substring(1)\r\n                            .toLowerCase()}`\r\n                )\r\n                .join(\" \"),\r\n            number: newNumber,\r\n        };\r\n        // POST request with a 5-sec notif\r\n        svc.create(obj)\r\n            .then(() => setPersons(persons.concat(obj)))\r\n            .then(() => clr())\r\n            .then(() => {\r\n                setTimeout(() => {\r\n                    setError({});\r\n                }, 5000);\r\n                setError({\r\n                    text: `Added ${newName}`,\r\n                    type: \"success\",\r\n                });\r\n            })\r\n            .catch((e) => console.log(e.message));\r\n    };\r\n\r\n    // Main page elements\r\n    return (\r\n        <div>\r\n            <h2 className=\"title\">Phonebook</h2>\r\n            {/* Notifier if error is not empty */}\r\n            <Notification message={error.text} type={error.type} />\r\n            {/* Search bar */}\r\n            <Filter\r\n                keyword={keyword}\r\n                stateUpdater={(event) => setKeyword(event.target.value)}\r\n            />\r\n            <h2 class=\"add\">Add new entry</h2>\r\n            {/* Form for person details (w/o validation)*/}\r\n            <PersonForm\r\n                submitAction={addName}\r\n                name={newName}\r\n                nameUpdater={(event) => setNewName(event.target.value)}\r\n                number={newNumber}\r\n                numberUpdater={(event) => setNewNumber(event.target.value)}\r\n            />\r\n            <h2>Numbers</h2>\r\n            {/* Phone directory */}\r\n            <Persons\r\n                db={persons}\r\n                keyword={keyword}\r\n                setDb={setPersons}\r\n                setError={setError}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}